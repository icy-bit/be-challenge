1. I chose Python because I'm familiar with it and how to use it for writing API endpoints with the Flask library.
2. The advantages of my solution are that it completely fulfills the requirements, and maintains all the history of transactions in two data structures called transactions and balances. Transactions consists of a list of objects of all the times we called the /add endpoint. Balances consists of each external payer and the number of points redeemable from them. The main disadvantage of this solution would be that the /spend endpoint will re-sort the transactions list every time it's called, which is slow. The solution would be to use a different data structure for transactions, maybe a SortedList from the sortedcontainers library. 
3. A favorite personal project of mine would be when I developed a web application for browsing public employee payroll data for my hometown. There was around 10 years of public PDF data showing breakdowns of every city employee's salaries, and I saved all the data into a PostgreSQL database hosted on AWS RDS. After cleaning the data, I deployed a web application with Node.js on the Heroku platform, and wrote SQL queries to let users query by different criteria for employees. This is one my favorite personal projects because it was used by many people I knew.